module displayLCD (
    input clock,          // Clock do sistema
    input reset,          // Sinal de reset
    input [31:0] numero,  // Número a ser exibido
    output reg rs,        // Registro para comando/dados
    output reg rw,        // Registro de leitura/escrita
    output reg enable,    // Registro de enable
    output reg [7:0] data // Dados enviados para o LCD
);

    // Estados para máquina de estados
    reg [3:0] estado;
    reg [15:0] contador;

    // Parâmetros para estados
    localparam INIT = 4'd0,
               CLEAR = 4'd1,
               SET_CURSOR = 4'd2,
               WRITE_DIGIT = 4'd3,
               WAIT = 4'd4;

    reg [3:0] digitos[7:0]; // Digitos do número de entrada
    reg [2:0] indice_digito;

    // Conversão do número para dígitos BCD
    integer i;
    always @(posedge clock or posedge reset) begin
        if (reset) begin
            for (i = 0; i < 8; i = i + 1) begin
                digitos[i] <= 4'd0;
            end
        end else begin
            digitos[0] <= numero % 10;
            digitos[1] <= (numero / 10) % 10;
            digitos[2] <= (numero / 100) % 10;
            digitos[3] <= (numero / 1000) % 10;
            digitos[4] <= (numero / 10000) % 10;
            digitos[5] <= (numero / 100000) % 10;
            digitos[6] <= (numero / 1000000) % 10;
            digitos[7] <= (numero / 10000000) % 10;
        end
    end

    // Máquina de estados para controlar o LCD
    always @(posedge clock or posedge reset) begin
        if (reset) begin
            estado <= INIT;
            contador <= 0;
            indice_digito <= 0;
            rs <= 0;
            rw <= 0;
            enable <= 0;
            data <= 8'h00;
        end else begin
            case (estado)
                INIT: begin
                    data <= 8'h38; // Configuração inicial (modo 8 bits)
                    rs <= 0;
                    rw <= 0;
                    enable <= 1;
                    contador <= 16'd10000; // Tempo para o comando
                    estado <= WAIT;
                end
                CLEAR: begin
                    data <= 8'h01; // Comando para limpar o display
                    rs <= 0;
                    rw <= 0;
                    enable <= 1;
                    contador <= 16'd10000; // Tempo para o comando
                    estado <= WAIT;
                end
                SET_CURSOR: begin
                    data <= 8'h80; // Configurar o cursor no início
                    rs <= 0;
                    rw <= 0;
                    enable <= 1;
                    contador <= 16'd10000; // Tempo para o comando
                    estado <= WAIT;
                end
                WRITE_DIGIT: begin
                    data <= 8'h30 + digitos[indice_digito]; // Enviar dígito convertido
                    rs <= 1; // Enviar como dado
                    rw <= 0;
                    enable <= 1;
                    contador <= 16'd10000; // Tempo para o comando
                    if (indice_digito < 7) begin
                        indice_digito <= indice_digito + 1;
                    end else begin
                        indice_digito <= 0;
                        estado <= INIT; // Reiniciar
                    end
                    estado <= WAIT;
                end
                WAIT: begin
                    if (contador > 0) begin
                        contador <= contador - 1;
                    end else begin
                        enable <= 0;
                        if (estado == WAIT) begin
                            estado <= WRITE_DIGIT;
                        end
                    end
                end
                default: estado <= INIT;
            endcase
        end
    end
endmodule
