// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/05/2022 18:35:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          teste
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module teste_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg enter;
reg [17:0] entrada;
// wires                                               
wire [31:0] dados;
wire [31:0] dadosLidos;
wire [2:0] desvio;
wire [31:0] endereco;
wire escreveMem;
wire escreveReg;
wire [1:0] ext;
wire [31:0] imediato;
wire in;
wire [31:0] instrucao;
wire [31:0] leRS;
wire [31:0] leRT;
wire memReg;
wire negativo;
wire [1:0] opULA;
wire origULA;
wire out;
wire regDst;
wire [31:0] result;
wire [31:0] saida;
wire [2:0] selec;
wire sinal;
wire stop;
wire [17:0] valor;
wire zero;

// assign statements (if any)                          
teste i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dados(dados),
	.dadosLidos(dadosLidos),
	.desvio(desvio),
	.endereco(endereco),
	.enter(enter),
	.entrada(entrada),
	.escreveMem(escreveMem),
	.escreveReg(escreveReg),
	.ext(ext),
	.imediato(imediato),
	.in(in),
	.instrucao(instrucao),
	.leRS(leRS),
	.leRT(leRT),
	.memReg(memReg),
	.negativo(negativo),
	.opULA(opULA),
	.origULA(origULA),
	.out(out),
	.regDst(regDst),
	.result(result),
	.saida(saida),
	.selec(selec),
	.sinal(sinal),
	.stop(stop),
	.valor(valor),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// enter
initial
begin
	enter = 1'b0;
	enter = #450000 1'b1;
	enter = #450000 1'b0;
end 
// entrada[ 17 ]
initial
begin
	entrada[17] = 1'b0;
end 
// entrada[ 16 ]
initial
begin
	entrada[16] = 1'b0;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b0;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b0;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b0;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b0;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b0;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b0;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b0;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b0;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b0;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b0;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b0;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b0;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b1;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b1;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b0;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b0;
end 
endmodule

