// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/11/2022 15:58:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dados_RAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dados_RAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] dados;
reg [31:0] endereco;
reg escreveMem;
// wires                                               
wire [31:0] dadosLidos;

// assign statements (if any)                          
dados_RAM i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dados(dados),
	.dadosLidos(dadosLidos),
	.endereco(endereco),
	.escreveMem(escreveMem)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// dados[ 31 ]
initial
begin
	dados[31] = 1'b0;
end 
// dados[ 30 ]
initial
begin
	dados[30] = 1'b0;
end 
// dados[ 29 ]
initial
begin
	dados[29] = 1'b0;
end 
// dados[ 28 ]
initial
begin
	dados[28] = 1'b0;
end 
// dados[ 27 ]
initial
begin
	dados[27] = 1'b0;
end 
// dados[ 26 ]
initial
begin
	dados[26] = 1'b0;
end 
// dados[ 25 ]
initial
begin
	dados[25] = 1'b0;
end 
// dados[ 24 ]
initial
begin
	dados[24] = 1'b0;
end 
// dados[ 23 ]
initial
begin
	dados[23] = 1'b0;
end 
// dados[ 22 ]
initial
begin
	dados[22] = 1'b0;
end 
// dados[ 21 ]
initial
begin
	dados[21] = 1'b0;
end 
// dados[ 20 ]
initial
begin
	dados[20] = 1'b0;
end 
// dados[ 19 ]
initial
begin
	dados[19] = 1'b0;
end 
// dados[ 18 ]
initial
begin
	dados[18] = 1'b0;
end 
// dados[ 17 ]
initial
begin
	dados[17] = 1'b0;
end 
// dados[ 16 ]
initial
begin
	dados[16] = 1'b0;
end 
// dados[ 15 ]
initial
begin
	dados[15] = 1'b0;
end 
// dados[ 14 ]
initial
begin
	dados[14] = 1'b0;
end 
// dados[ 13 ]
initial
begin
	dados[13] = 1'b0;
end 
// dados[ 12 ]
initial
begin
	dados[12] = 1'b0;
end 
// dados[ 11 ]
initial
begin
	dados[11] = 1'b0;
end 
// dados[ 10 ]
initial
begin
	dados[10] = 1'b0;
end 
// dados[ 9 ]
initial
begin
	dados[9] = 1'b0;
end 
// dados[ 8 ]
initial
begin
	dados[8] = 1'b0;
end 
// dados[ 7 ]
initial
begin
	dados[7] = 1'b0;
end 
// dados[ 6 ]
initial
begin
	dados[6] = 1'b0;
	dados[6] = #520000 1'b1;
end 
// dados[ 5 ]
initial
begin
	dados[5] = 1'b0;
	dados[5] = #280000 1'b1;
	dados[5] = #240000 1'b0;
	dados[5] = #280000 1'b1;
end 
// dados[ 4 ]
initial
begin
	dados[4] = 1'b0;
	# 160000;
	repeat(2)
	begin
		dados[4] = 1'b1;
		dados[4] = #120000 1'b0;
		# 120000;
	end
	dados[4] = 1'b1;
	dados[4] = #160000 1'b0;
	dados[4] = #120000 1'b1;
end 
// dados[ 3 ]
initial
begin
	dados[3] = 1'b0;
	# 80000;
	repeat(2)
	begin
		dados[3] = 1'b1;
		dados[3] = #80000 1'b0;
		# 40000;
	end
	dados[3] = 1'b1;
	# 80000;
	repeat(2)
	begin
		dados[3] = 1'b0;
		dados[3] = #80000 1'b1;
		# 40000;
	end
	dados[3] = 1'b0;
	# 80000;
	repeat(2)
	begin
		dados[3] = 1'b1;
		dados[3] = #80000 1'b0;
		# 40000;
	end
	dados[3] = 1'b1;
end 
// dados[ 2 ]
initial
begin
	dados[2] = 1'b0;
	# 40000;
	repeat(3)
	begin
		dados[2] = 1'b1;
		dados[2] = #40000 1'b0;
		dados[2] = #40000 1'b1;
		dados[2] = #80000 1'b0;
		dados[2] = #40000 1'b1;
		dados[2] = #40000 1'b0;
		# 80000;
	end
end 
// dados[ 1 ]
initial
begin
	repeat(6)
	begin
		dados[1] = 1'b0;
		dados[1] = #80000 1'b1;
		# 80000;
	end
	dados[1] = 1'b0;
end 
// dados[ 0 ]
initial
begin
	repeat(12)
	begin
		dados[0] = 1'b0;
		dados[0] = #40000 1'b1;
		# 40000;
	end
	dados[0] = 1'b0;
end 
// endereco[ 31 ]
initial
begin
	endereco[31] = 1'b0;
end 
// endereco[ 30 ]
initial
begin
	endereco[30] = 1'b0;
end 
// endereco[ 29 ]
initial
begin
	endereco[29] = 1'b0;
end 
// endereco[ 28 ]
initial
begin
	endereco[28] = 1'b0;
end 
// endereco[ 27 ]
initial
begin
	endereco[27] = 1'b0;
end 
// endereco[ 26 ]
initial
begin
	endereco[26] = 1'b0;
end 
// endereco[ 25 ]
initial
begin
	endereco[25] = 1'b0;
end 
// endereco[ 24 ]
initial
begin
	endereco[24] = 1'b0;
end 
// endereco[ 23 ]
initial
begin
	endereco[23] = 1'b0;
end 
// endereco[ 22 ]
initial
begin
	endereco[22] = 1'b0;
end 
// endereco[ 21 ]
initial
begin
	endereco[21] = 1'b0;
end 
// endereco[ 20 ]
initial
begin
	endereco[20] = 1'b0;
end 
// endereco[ 19 ]
initial
begin
	endereco[19] = 1'b0;
end 
// endereco[ 18 ]
initial
begin
	endereco[18] = 1'b0;
end 
// endereco[ 17 ]
initial
begin
	endereco[17] = 1'b0;
end 
// endereco[ 16 ]
initial
begin
	endereco[16] = 1'b0;
end 
// endereco[ 15 ]
initial
begin
	endereco[15] = 1'b0;
end 
// endereco[ 14 ]
initial
begin
	endereco[14] = 1'b0;
end 
// endereco[ 13 ]
initial
begin
	endereco[13] = 1'b0;
end 
// endereco[ 12 ]
initial
begin
	endereco[12] = 1'b0;
end 
// endereco[ 11 ]
initial
begin
	endereco[11] = 1'b0;
end 
// endereco[ 10 ]
initial
begin
	endereco[10] = 1'b0;
end 
// endereco[ 9 ]
initial
begin
	endereco[9] = 1'b0;
end 
// endereco[ 8 ]
initial
begin
	endereco[8] = 1'b0;
end 
// endereco[ 7 ]
initial
begin
	endereco[7] = 1'b0;
end 
// endereco[ 6 ]
initial
begin
	endereco[6] = 1'b0;
end 
// endereco[ 5 ]
initial
begin
	endereco[5] = 1'b0;
	endereco[5] = #640000 1'b1;
end 
// endereco[ 4 ]
initial
begin
	endereco[4] = 1'b0;
	endereco[4] = #320000 1'b1;
	endereco[4] = #320000 1'b0;
	endereco[4] = #320000 1'b1;
end 
// endereco[ 3 ]
initial
begin
	repeat(3)
	begin
		endereco[3] = 1'b0;
		endereco[3] = #160000 1'b1;
		# 160000;
	end
	endereco[3] = 1'b0;
end 
// endereco[ 2 ]
initial
begin
	repeat(6)
	begin
		endereco[2] = 1'b0;
		endereco[2] = #80000 1'b1;
		# 80000;
	end
	endereco[2] = 1'b0;
end 
// endereco[ 1 ]
initial
begin
	repeat(12)
	begin
		endereco[1] = 1'b0;
		endereco[1] = #40000 1'b1;
		# 40000;
	end
	endereco[1] = 1'b0;
end 
// endereco[ 0 ]
always
begin
	endereco[0] = 1'b0;
	endereco[0] = #20000 1'b1;
	#20000;
end 

// escreveMem
initial
begin
	repeat(12)
	begin
		escreveMem = 1'b0;
		escreveMem = #40000 1'b1;
		# 40000;
	end
	escreveMem = 1'b0;
end 
endmodule

