// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/11/2022 16:12:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] instrucao;
// wires                                               
wire [2:0] desvio;
wire escreveMem;
wire escreveReg;
wire ext;
wire memReg;
wire [1:0] opULA;
wire origULA;
wire out;
wire regDst;
wire stop;

// assign statements (if any)                          
UC i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.desvio(desvio),
	.escreveMem(escreveMem),
	.escreveReg(escreveReg),
	.ext(ext),
	.instrucao(instrucao),
	.memReg(memReg),
	.opULA(opULA),
	.origULA(origULA),
	.out(out),
	.regDst(regDst),
	.stop(stop)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// instrucao[ 31 ]
initial
begin
	instrucao[31] = 1'b0;
	instrucao[31] = #320000 1'b1;
	instrucao[31] = #320000 1'b0;
	instrucao[31] = #320000 1'b1;
end 
// instrucao[ 30 ]
initial
begin
	repeat(3)
	begin
		instrucao[30] = 1'b0;
		instrucao[30] = #160000 1'b1;
		# 160000;
	end
	instrucao[30] = 1'b0;
end 
// instrucao[ 29 ]
initial
begin
	repeat(6)
	begin
		instrucao[29] = 1'b0;
		instrucao[29] = #80000 1'b1;
		# 80000;
	end
	instrucao[29] = 1'b0;
end 
// instrucao[ 28 ]
initial
begin
	repeat(12)
	begin
		instrucao[28] = 1'b0;
		instrucao[28] = #40000 1'b1;
		# 40000;
	end
	instrucao[28] = 1'b0;
end 
// instrucao[ 27 ]
always
begin
	instrucao[27] = 1'b0;
	instrucao[27] = #20000 1'b1;
	#20000;
end 
// instrucao[ 26 ]
always
begin
	instrucao[26] = 1'b0;
	instrucao[26] = #10000 1'b1;
	#10000;
end 
// instrucao[ 25 ]
initial
begin
	instrucao[25] = 1'b0;
end 
// instrucao[ 24 ]
initial
begin
	instrucao[24] = 1'b0;
end 
// instrucao[ 23 ]
initial
begin
	instrucao[23] = 1'b0;
end 
// instrucao[ 22 ]
initial
begin
	instrucao[22] = 1'b0;
end 
// instrucao[ 21 ]
initial
begin
	instrucao[21] = 1'b0;
end 
// instrucao[ 20 ]
initial
begin
	instrucao[20] = 1'b0;
end 
// instrucao[ 19 ]
initial
begin
	instrucao[19] = 1'b0;
end 
// instrucao[ 18 ]
initial
begin
	instrucao[18] = 1'b0;
end 
// instrucao[ 17 ]
initial
begin
	instrucao[17] = 1'b0;
end 
// instrucao[ 16 ]
initial
begin
	instrucao[16] = 1'b0;
end 
// instrucao[ 15 ]
initial
begin
	instrucao[15] = 1'b0;
end 
// instrucao[ 14 ]
initial
begin
	instrucao[14] = 1'b0;
end 
// instrucao[ 13 ]
initial
begin
	instrucao[13] = 1'b0;
end 
// instrucao[ 12 ]
initial
begin
	instrucao[12] = 1'b0;
end 
// instrucao[ 11 ]
initial
begin
	instrucao[11] = 1'b0;
end 
// instrucao[ 10 ]
initial
begin
	instrucao[10] = 1'b0;
end 
// instrucao[ 9 ]
initial
begin
	instrucao[9] = 1'b0;
end 
// instrucao[ 8 ]
initial
begin
	instrucao[8] = 1'b0;
end 
// instrucao[ 7 ]
initial
begin
	instrucao[7] = 1'b0;
end 
// instrucao[ 6 ]
initial
begin
	instrucao[6] = 1'b0;
end 
// instrucao[ 5 ]
initial
begin
	instrucao[5] = 1'b0;
end 
// instrucao[ 4 ]
initial
begin
	instrucao[4] = 1'b0;
end 
// instrucao[ 3 ]
initial
begin
	instrucao[3] = 1'b0;
end 
// instrucao[ 2 ]
initial
begin
	instrucao[2] = 1'b0;
end 
// instrucao[ 1 ]
initial
begin
	instrucao[1] = 1'b0;
end 
// instrucao[ 0 ]
initial
begin
	instrucao[0] = 1'b0;
end 
endmodule

